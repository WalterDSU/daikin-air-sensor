esphome:
  name: "daikin-air-sensor"
  project:
    name: "DAIKIN.BRY88AB151K"
    version: "PM2105" #根据自己PM2.5传感器型号选择，方便后续OTA查找文件
    # version: "PM2005"
  #name_add_mac_suffix: true
  includes:
    - "ze08-ch2o.h"
    - "cm1106.h"
    - "pm2105i2c.h"  #根据自己PM2.5传感器型号选择对应的文件
    # - "pm2005.h"

esp32:
  board: nodemcu-32s

wifi: 
  ssid: '123' #填写自己的WiFi及密码
  password: '8888888888'
  ap:
    ssid: "DAIKIN Fallback Hotspot"

captive_portal:

api:

ota:

web_server: #蓝牙代理建议弃用这个服务
  port: 80

logger:
  logs:
    sgp30: WARN
    hdc1080: WARN
    sensor: WARN
    component: ERROR
#bluetooth_proxy:  #需要蓝牙代理功能可以打开
  #active: true
#esp32_ble_tracker: #需要蓝牙代理功能可以打开
  #scan_parameters:
    #interval: 1100ms
    #window: 1100ms
    #active: true

uart:
- id: cm1106_uart
  rx_pin: 16
  tx_pin: 17
  baud_rate: 9600
- id: uart_ze08
  tx_pin: 5
  rx_pin: 18
  baud_rate: 9600

i2c:
- id: pm25_bus
  sda: 23
  scl: 22
  scan: true
- id: th_bus
  sda: 19
  scl: 21
  scan: true

custom_component:
- lambda: |-
    auto ze08 = new WinsenZE08Sensor(id(uart_ze08), id(ze08_ch2o));
    App.register_component(ze08);
    return {ze08};
sensor:
- platform: template
  name: "DAIKIN CH2O Sensor"
  id: ze08_ch2o
  device_class: volatile_organic_compounds
  unit_of_measurement: "µg/m³"
  state_class: "measurement"
  accuracy_decimals: 0
- platform: custom
  lambda: |-
    auto cm1106Sensor = new CM1106Sensor(id(cm1106_uart), 10000);
    App.register_component(cm1106Sensor);
    return {cm1106Sensor};
  sensors:
  - name: "DAIKIN CO2 Sensor"
    id: co2sensor
    device_class: carbon_dioxide
    unit_of_measurement: "ppm"
    state_class: "measurement"
- platform: custom
  lambda: |-
    auto pm2105 = new PM2105Sensor(pm25_bus, 0x28, true);
    App.register_component(pm2105);
    return {pm2105->pm1p0_sensor, pm2105->pm2p5_sensor, pm2105->pm10_sensor, pm2105->AQI_s, pm2105->AQILevel_s, pm2105->MainPollutedn_s};
  sensors:
    - name: "DAIKIN PM1.0 Sensor"
      device_class: pm1
      unit_of_measurement: "µg/m³"
      state_class: "measurement"
    - name: "DAIKIN PM2.5 Sensor"
      id: pm25
      device_class: pm25
      unit_of_measurement: "µg/m³"
      state_class: "measurement"
    - name: "DAIKIN PM10.0 Sensor"
      device_class: pm10
      unit_of_measurement: "µg/m³"
      state_class: "measurement"
    - name: "DAIKIN AQI"
      id: aqi
    - id: aqilevel
      #name: "${friendly_name} AQILevel"
      on_value:
        then:
          - lambda: |-  
              if (x == 5) {
                id(aqi_cn).publish_state("严重污染");
              }else if (x == 4) {
                id(aqi_cn).publish_state("重度污染");
              }else if (x == 3) {
                id(aqi_cn).publish_state("中度污染");
              }else if (x == 2) {
                id(aqi_cn).publish_state("轻度污染");
              }else if (x == 1) {
                id(aqi_cn).publish_state("良");
              }else if (x == 0) {
                id(aqi_cn).publish_state("优");
              }
    - id: mainpollutedn
      #name: "${friendly_name} MainPollutedn"
      on_value:
        then:
          - lambda: |-
              if (x == 1) {
                id(mainpolluted).publish_state("PM10");
              } else {
                id(mainpolluted).publish_state("PM2.5");
              }  
- platform: sgp30
  i2c_id: th_bus
  compensation:
    temperature_source: temperature
    humidity_source: humidity
  eco2:
    id: eco2sensor
    internal: true
  tvoc:
    name: "DAIKIN TVOC Sensor"
    id: tvocsensor
    device_class: volatile_organic_compounds
    unit_of_measurement: "µg/m³"
    filters:
      - lambda: |-
          if (x * id(tvocmultiply).state > id(tvocmax).state) {
            return id(tvocmax).state;
          } else {
            return x * id(tvocmultiply).state;
          }
- platform: hdc1080
  i2c_id: th_bus
  update_interval: 10s
  temperature:
    name: "DAIKIN Temperature Sensor"
    id: temperature
    filters:
      - lambda: return x - id(temperatureoffset).state;
  humidity:
    name: "DAIKIN Humidity Sensor"
    id: humidity
    filters:
      - lambda: return x * id(humiditymultiply).state;
      - clamp:
          max_value: 100
- platform: wifi_signal
  name: "DAIKIN Signal"

switch:
- platform: template
  name: "DAIKIN LED Indicator"
  restore_mode: RESTORE_DEFAULT_OFF
  icon: mdi:led-off
  id: indicator
  optimistic: true
- platform: custom
  lambda: |-
    auto cm1106Calib = new CM1106CalibrateSwitch(id(cm1106_uart));
    App.register_component(cm1106Calib);
    return {cm1106Calib};
  switches:
    id: calibration
    internal: true
- platform: gpio
  pin: 4
  id: co2led
  internal: true
- platform: gpio
  pin: 32
  id: tvocch2oled
  internal: true
- platform: gpio
  pin: 33
  id: pm25led
  internal: true

status_led:
  pin: 25

number:
- platform: template
  name: "DAIKIN Threshold CO2"
  entity_category: "config"
  id: co2threshold
  optimistic: true
  unit_of_measurement: "ppm"
  min_value: 400
  max_value: 5000
  step: 100
  initial_value: 1000
  restore_value: true
- platform: template
  name: "DAIKIN Threshold PM2.5"
  entity_category: "config"
  id: pm25threshold
  optimistic: true
  unit_of_measurement: "µg/m³"
  min_value: 0
  max_value: 200
  step: 10
  initial_value: 50
  restore_value: true
- platform: template
  name: "DAIKIN Threshold CH2O"
  entity_category: "config"
  id: ch2othreshold
  optimistic: true
  unit_of_measurement: "µg/m³"
  min_value: 10
  max_value: 200
  step: 10
  initial_value: 100
  restore_value: true
- platform: template
  name: "DAIKIN Threshold TVOC"
  entity_category: "config"
  id: tvocthreshold
  optimistic: true
  unit_of_measurement: "µg/m³"
  min_value: 0
  max_value: 50000
  step: 1000
  initial_value: 1000
  restore_value: true
- platform: template
  name: "DAIKIN TVOC MAX"
  entity_category: "config"
  id: tvocmax
  optimistic: true
  unit_of_measurement: "µg/m³"
  min_value: 5000
  max_value: 50000
  step: 1000
  initial_value: 10000
  restore_value: true
- platform: template
  name: "DAIKIN TVOC Multiply"
  entity_category: "config"
  id: tvocmultiply
  optimistic: true
  min_value: 1
  max_value: 5
  step: 0.1
  initial_value: 3
  restore_value: true
- platform: template
  name: "DAIKIN Humidity Multiply"
  entity_category: "config"
  id: humiditymultiply
  optimistic: true
  min_value: 1
  max_value: 1.6
  step: 0.01
  initial_value: 1.4
  restore_value: true
- platform: template
  name: "DAIKIN Temperature Offset"
  entity_category: "config"
  id: temperatureoffset
  optimistic: true
  min_value: 0
  max_value: 10
  step: 0.1
  initial_value: 6
  restore_value: true

binary_sensor:
- platform: template
  internal: true
  id: tvocch2olambda
  lambda: |-
    if (id(indicator).state == true) {
      if (id(ze08_ch2o).state > id(ch2othreshold).state || id(tvocsensor).state > id(tvocthreshold).state) {
        return true;
      } else {
        return false;
    }
    } else {
      return false;
    }
  on_press:
    then:
      - switch.turn_on: tvocch2oled
  on_release:
    then:
      - switch.turn_off: tvocch2oled
- platform: template
  internal: true
  id: co2lambda
  lambda: |-
    if (id(indicator).state == true) {
      if (id(co2sensor).state > id(co2threshold).state) {
        return true;
      } else {
        return false;
    }
    } else {
      return false;
    }
  on_press:
    then:
      - switch.turn_on: co2led
  on_release:
    then:
      - switch.turn_off: co2led
- platform: template
  internal: true
  id: pm25lambda
  lambda: |-
    if (id(indicator).state == true) {
      if (id(pm25).state > id(pm25threshold).state) {
        return true;
      } else {
        return false;
    }
    } else {
      return false;
    }
  on_press:
    then:
      - switch.turn_on: pm25led
  on_release:
    then:
      - switch.turn_off: pm25led
- platform: template
  internal: true
  id: co2_calibration
  lambda: |-
    if (id(co2sensor).state == 400) {
      return true;
    } else {
      return false;
    }
  filters:
    - delayed_on: 5min #CO2持续400ppm并保持5分钟会自动校准
  on_press:
    then:
      - switch.turn_on: calibration
- platform: gpio
  pin: 34
  id: RESET
  internal: true
  on_press:
    then:
      - button.press: reset
# - platform: gpio
#   pin: 34
#   id: RESET
#   internal: true
#   on_press:  #按下背面RESET按钮后CO2指示灯亮，5分钟后将当前环境CO2浓度设置为基准400ppm
#     then:
#       - switch.turn_on: co2led
#       - delay: 5min #可自定义修改时间
#       - switch.turn_on: calibration

button:
- platform: restart
  name: "DAIKIN Restart"
  entity_category: "diagnostic"
- platform: factory_reset
  id: reset
  internal: true
- platform: template
  name: "DAIKIN CO2 Calibration" #按下后会将当前环境CO2浓度设置为基准400ppm，按下时请确保放入室外或此时CO2浓度足够低
  entity_category: "diagnostic"
  on_press:
    then:
      - switch.turn_on: calibration
text_sensor:
  - platform: template
    name: "DAIKIN AQI_CN"
    id: aqi_cn
  - platform: template
    name: "DAIKIN MainPolluted"
    id: mainpolluted         
# - platform: template
#   name: "DAIKIN CH2O ACTIVE" #按下后打开甲醛传感器主动上报模式，仅用于插回原厂固件机器上，ESPHome无法继续解析数据，重启ESPHome后自动打开问答模式
#   entity_category: "diagnostic"
#   on_press:
#     - uart.write: 
#         id: uart_ze08
#         data: [0xFF, 0x01, 0x78, 0x40, 0x00, 0x00, 0x00, 0x00, 0x47]
